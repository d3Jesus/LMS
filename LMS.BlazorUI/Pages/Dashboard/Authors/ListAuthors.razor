@page "/authors"
@layout DashboardLayout

@inject IJSRuntime JS
@inject IAuthorService Service

<Breadcrumb title="Authors" />

<CardComponent title="List of Authors">

    <bodyFragment>
        <TableComponent>
            <Content>
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Nationality</th>
                        <th>&nbsp;</th>
                    </tr>
                </thead>
                <tbody>
                        @if (authors is not null)
                        {
                            <Virtualize Items="authors" Context="author">
                                <tr>
                                    <td scope="row">@author.Id</td>
                                    <td>@author.FirstName</td>
                                    <td>@author.LastName</td>
                                    <td>@author.Nationality</td>
                                    <td>
                                    <button type="button" class="btn text-info" @onclick="@(() => Modal.DisplayModal(ModalOperations.UPDATE, "Update Author", author.Id))"
                                                data-bs-toggle="tooltip" data-bs-placement="top" title="Update Author">
                                            <i class="bi bi-pencil"></i>
                                        </button>

                                    <button type="button" class="btn text-danger"
                                            data-bs-toggle="tooltip" data-bs-placement="top" title="Delete Author">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            </Virtualize>
                        }
                </tbody>
            </Content>
        </TableComponent>
    </bodyFragment>

    <footerFragment>
        <button type="button" class="btn btn-outline-success" @onclick="@(() => Modal.DisplayModal(ModalOperations.ADD, "Add Author"))" 
            data-bs-toggle="tooltip" data-bs-placement="top" title="Add Author">
            <i class="bi bi-plus"></i> New
        </button>

    </footerFragment>

</CardComponent>

<ModalComponent @ref="Modal">

    <bodyFragment>
        
        @switch (Modal._operation)
        {
            case ModalOperations.ADD:
                <AddAuthor @ref="AddForm" />
                break;
            case ModalOperations.UPDATE:
                <UpdateAuthor @ref="UpdateForm" authorId="@Modal._id" />
                break;
        }
    </bodyFragment>

    <footerFragment>
        
        
        @switch (Modal._operation)
        {
            case ModalOperations.ADD:
                <button type="submit" class="btn btn-outline-success" @onclick="@(() => AddForm.OnValidSubmit())">
                    <i class="bi bi-save"></i> Save
                </button>
                break;
            case ModalOperations.UPDATE:
                <button type="submit" class="btn btn-outline-success" @onclick="@(() => UpdateForm.OnValidSubmit())">
                    <i class="bi bi-save"></i> Update
                </button>
                break;
        }
    </footerFragment>

</ModalComponent>


@code {
    private List<Author> authors;
    private AddAuthor AddForm;
    private UpdateAuthor UpdateForm;
    private ModalComponent Modal;

    protected override async Task OnInitializedAsync()
    {
        var result = await Service.GetAllAsync();
        authors = result.ToList();
        StateHasChanged();
    }
}
