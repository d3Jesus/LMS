@page "/authors/delete/{authorId:int}"
@layout DashboardLayout

@inject IAuthorService Service
@inject NavigationManager NavigationManager

<div class="pagetitle">
    <h1>Delete Author</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <NavLink href="dashboard">
                    Dashboard
                </NavLink>
            </li>
            <li class="breadcrumb-item">
                <NavLink href="authors">
                    Authors
                </NavLink>
            </li>
            <li class="breadcrumb-item active">Delete Author</li>
        </ol>
    </nav>
</div>

@if(responseMessage is not null)
{
    if(responseStatus)
    {
        <AlertComponent alertMessage="@responseMessage" alertType="success" />
    } else
    {
        <AlertComponent alertMessage="@responseMessage" alertType="danger" />
    }
}

<EditForm Model="@author" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
        <CardComponent title="Delete Author">
            <bodyFragment>

                <p>You are about to delete the author named <i>@authorFullName</i></p>

            </bodyFragment>
            <footerFragment>
                <a class="btn btn-outline-secondary @IsDisabled" href="/authors">
                    Cancel
                </a>
                <button type="submit" class="btn btn-outline-danger @IsDisabled">
                    <i class="bi bi-trash"></i> Delete
                </button>
            </footerFragment>
        </CardComponent>
</EditForm>

@code {
    private Author author = new Author();
    private string authorFullName;
    private bool responseStatus;
    private string responseMessage;
    private string IsDisabled = string.Empty;

    [Parameter]
    public int authorId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await Service.GetByAsync(authorId);
        author = response.ResponseData;

        authorFullName = string.Concat(author.FirstName, " ", author.LastName);
    }

    public async Task OnValidSubmit()
    {
        IsDisabled = "disabled";
        var result = await Service.DeleteAsync(author);
        responseStatus = result.Succeeded;
        responseMessage = result.Message;
        StateHasChanged();

        await Task.Delay(2000);
        NavigationManager.NavigateTo("authors", true);
    }

}