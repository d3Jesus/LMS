@page "/librarians/delete/{librarianId:int}"
@layout DashboardLayout

@inject ILibrarianService Service
@inject NavigationManager NavigationManager

<div class="pagetitle">
    <h1>Librarian</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">Dashboard</li>
            <li class="breadcrumb-item">
                <NavLink href="librarians">
                    Librarians
                </NavLink>
            </li>
            <li class="breadcrumb-item active">Delete Librarian</li>
        </ol>
    </nav>
</div>

@if(responseMessage is not null)
{
    if(responseStatus)
    {
        <AlertComponent alertMessage="@responseMessage" alertType="success" />
    } else
    {
        <AlertComponent alertMessage="@responseMessage" alertType="danger" />
    }
}

<CardComponent title="Delete Librarian">
    <bodyFragment>

        <h6>The librarian <b>@librarianName</b> is about to be deleted!</h6>
        <h5 class="text-danger">Are you sure that you want to delete this record ?</h5>
            
    </bodyFragment>
    <footerFragment>
        <div class="text-center">
            <a href="librarians" class="btn btn-outline-secondary @IsDisabled">
                Cancel
            </a>
            <button type="button" class="btn btn-outline-danger @IsDisabled" @onclick="@(OnValidSubmit)">
                <i class="bi bi-trash"></i> Delete
            </button>
        </div>
    </footerFragment>
</CardComponent>

@code {
    [Parameter]
    public int librarianId { get; set; }
    private string librarianName = string.Empty;
    
    private bool responseStatus;
    private string responseMessage;
    private string IsDisabled = string.Empty;

    protected override async Task OnParametersSetAsync() => librarianName = (await Service.GetByAsync(librarianId)).ResponseData.FirstName;

    public async Task OnValidSubmit()
    {
        IsDisabled = "disabled";
        var result = await Service.DeleteAsync(librarianId);
        responseStatus = result.Succeeded;
        responseMessage = result.Message;
        StateHasChanged();

        await Task.Delay(2000);
        NavigationManager.NavigateTo("librarians", true);
    }
}
