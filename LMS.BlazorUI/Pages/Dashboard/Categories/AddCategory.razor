@page "/categories/new"
@layout DashboardLayout

@inject ICategoryService Service
@inject NavigationManager NavigationManager

<div class="pagetitle">
    <h1>New Category</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <NavLink href="dashboard">
                    Dashboard
                </NavLink>
            </li>
            <li class="breadcrumb-item">
                <NavLink href="categories">
                    Categories
                </NavLink>
            </li>
            <li class="breadcrumb-item active">New Category</li>
        </ol>
    </nav>
</div>

@if(responseMessage is not null)
{
    if(responseStatus)
    {
        <AlertComponent alertMessage="@responseMessage" alertType="success" />
    } else
    {
        <AlertComponent alertMessage="@responseMessage" alertType="danger" />
    }
}

<EditForm Model="@category" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />

    <CardComponent title="New Category">
        <bodyFragment>
            <div class="form-group">
                <input type="text" class="form-control" id="name"
                    placeholder="Category Name" autocomplete="off"
                    @bind-value="category.CategoryName">
            </div>
        </bodyFragment>
        <footerFragment>
            <a class="btn btn-outline-secondary @IsDisabled" href="/categories">
                Cancel
            </a>
            <button type="submit" class="btn btn-outline-success @IsDisabled">
                <i class="bi bi-save"></i> Save
            </button>
        </footerFragment>
    </CardComponent>
</EditForm>

@code {
    private Category category = new Category();
    private bool responseStatus;
    private string responseMessage;
    private string IsDisabled = string.Empty;

    public async Task OnValidSubmit()
    {
        IsDisabled = "disabled";
        var result = await Service.CreateAsync(category);
        responseStatus = result.Succeeded;
        responseMessage = result.Message;
        StateHasChanged();

        await Task.Delay(2000);
        NavigationManager.NavigateTo("categories", true);
    }

}
