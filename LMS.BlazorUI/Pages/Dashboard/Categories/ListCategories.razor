
@page "/categories"
@layout DashboardLayout

@inject IJSRuntime JS
@inject ICategoryService Service

<Breadcrumb title="Categories"/>

<CardComponent title="List of Categories">

    <bodyFragment>
        <div class="table-responsive">
            <table class="table table-sm table-hover" id="categoryTable" style="width: 100%;" cellspacing="0">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>&nbsp;</th>
                    </tr>
                </thead>
                <tbody>
                    @if (categories is not null)
                    {
                        foreach (var category in categories)
                        {
                            <tr>
                                <td scope="row">@category.Id</td>
                                <td>@category.CategoryName</td>
                                <td>
                                    <button type="button" class="btn btn-link" @onclick="@(() => DisplayModal("UPDATE", category.Id))">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </bodyFragment>

    <footerFragment>
        <button type="button" class="btn btn-outline-success" @onclick="@(() => DisplayModal("ADD"))">
            <i class="bi bi-plus"></i> New
        </button>
        
    </footerFragment>

</CardComponent>

<ModalComponent title="@_title" cssStyle="@style">

    <bodyFragment>
        @switch(_operation)
        {
            case "ADD":
                <AddCategory @ref="AddForm" />
                break;
            case "UPDATE": 
                <UpdateCategory @ref="UpdateForm" categoryId="@_id" />
                break;
        }
    </bodyFragment>

    <footerFragment>
        @switch (_operation)
        {
            case "ADD":
                <button type="submit" class="btn btn-outline-success" @onclick="@(() => AddForm.OnValidSubmit())">
                    <i class="bi bi-save"></i> Save
                </button>
                break;
            case "UPDATE":
                <button type="submit" class="btn btn-outline-success" @onclick="@(() => UpdateForm.OnValidSubmit())">
                    <i class="bi bi-save"></i> Update
                </button>
                break;
        }
    </footerFragment>

</ModalComponent>

@code {
    private IEnumerable<Category> categories;
    private string style { get; set; }
    private AddCategory AddForm;
    private UpdateCategory UpdateForm;
    private string _operation;
    private string _title;
    private int _id;

    protected override async Task OnInitializedAsync()
    {
        categories = await Service.GetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("addDatatable", "#categoryTable");
    }

    private void DisplayModal(string operation, int id = 0)
    {
        _operation = operation;
        switch (_operation)
        {
            case "ADD":
                _title = "Add Category";
                break;
            case "UPDATE":
                _title = "Update Category";
                _id = id;
                break;
        }
        style = "display: block;";
    }
}
