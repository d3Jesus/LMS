
<SearchAuthorComponent OnSelectedAuthor="OnSelectedAuthor"></SearchAuthorComponent>

<div class="table-responsive">
    <table class="table table-sm table-hover" style="width: 100%;" cellspacing="0">
        <thead>
            <tr>
                <th>Author #</th>
                <th>Author Name</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @if (listOfAuthors != null)
            {
                <Virtualize Items="listOfAuthors" Context="bookAuthors">
                    <tr>
                        <td>@bookAuthors.AuthorId</td>
                        <td>@bookAuthors.AuthorName</td>
                        <td>
                            <button type="button" class="btn text-danger"
                                    @onclick="@(()=>RemoveAuthor(bookAuthors))">
                                <i class="bi bi-x-circle"></i>
                            </button>
                        </td>
                    </tr>
                </Virtualize>
            }
            else
            {
                <tr>
                    <td>Authors added will appear here!</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {

    [Parameter]
    public EventCallback<List<BookAuthorsViewModel>> OnAuthorSelected { get; set; }
    [Parameter]
    public List<BookAuthorsViewModel> listOfAuthors { get; set; }

    protected override void OnInitialized()
    {
        if(listOfAuthors is null)
            listOfAuthors = new();
    }

    private async Task OnSelectedAuthor(BookAuthorsViewModel product)
    {
        if (!listOfAuthors.Any(x => x.AuthorName.Equals(product.AuthorName, StringComparison.OrdinalIgnoreCase)))
            this.listOfAuthors.Add(product);

        await OnAuthorSelected.InvokeAsync(this.listOfAuthors);

    }

    private void RemoveAuthor(BookAuthorsViewModel prd) => this.listOfAuthors.Remove(prd);
}
