@page "/books/delete/{bookId:int}"
@layout DashboardLayout

@inject IBookService Service
@inject NavigationManager NavigationManager

<div class="pagetitle">
    <h1>Books</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">Dashboard</li>
            <li class="breadcrumb-item">
                <NavLink href="books">Books</NavLink>
            </li>
            <li class="breadcrumb-item active">Delete Book</li>
        </ol>
    </nav>
</div>

@if(responseMessage is not null)
{
    if(responseStatus)
    {
        <AlertComponent alertMessage="@responseMessage" alertType="success" />
    } else
    {
        <AlertComponent alertMessage="@responseMessage" alertType="danger" />
    }
}

<CardComponent title="List of Books">

    <bodyFragment>
        <h6>The book @book.Title is about to be deleted!</h6>
        <h5 class="text-danger">Are you sure you want to delete this record ?</h5>
    </bodyFragment>
    <footerFragment>
        <a href="books" class="btn btn-outline-secondary @IsDisabled">
            Cancel
        </a>
        <button type="button" class="btn btn-outline-danger @IsDisabled" @onclick="@(OnValidSubmit)">
            <i class="bi bi-trash"></i> Delete
        </button>
    </footerFragment>
</CardComponent>

@code {

    private Book book = new Book();

    [Parameter]
    public int bookId { get; set; }
    private bool responseStatus;
    private string responseMessage;
    private string IsDisabled = string.Empty;

    protected override async Task OnParametersSetAsync() => book = await Service.GetByAsync(bookId);

    public async Task OnValidSubmit()
    {
        IsDisabled = "disabled";
        await Service.DeleteAsync(bookId);
        responseStatus = true;
        responseMessage = "Book deleted successfully";
        StateHasChanged();

        await Task.Delay(2000);

        NavigationManager.NavigateTo("books", true);
    }
}
