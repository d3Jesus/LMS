@* this page is used to display a reusable input to search authors *@

@inject IAuthorService Service

<div class="form-group mt-2 mb-2">

    <input type="text" class="form-control"
           placeholder="Type author's name here to search"
           @bind-value="authorName"
           @bind-value:event="oninput"
           autocomplete="off" />

</div>

@if (this.DisplaySearchResult != false && _authorsList != null)
{
    <div style="overflow-y:auto; max-height: 300px; border: 1px solid silver">
        <ul style="list-style-type:none">
            @foreach (var author in _authorsList)
            {
                <li style="cursor:pointer" @onclick="@(async()=>{ await SelectedAuthor(author); })" @key="author.AuthorId">
                    @author.AuthorName
                </li>
            }
        </ul>
    </div>
}

@code {
    private string _authorName;
    private string authorName
    {
        get => _authorName;
        set
        {
            _authorName = value;
            if (!string.IsNullOrWhiteSpace(_authorName) && _authorName.Length > 3)
            {
                SearchAuthor();
            }
        }
    }

    private List<BookAuthorsViewModel> _authorsList;

    [Parameter]
    public EventCallback<BookAuthorsViewModel> OnSelectedAuthor { get; set; }

    [Parameter]
    public bool DisplaySearchResult { get; set; } = false;

    private async void SearchAuthor()
    {
        var result = (await Service.GetByName(authorName ?? string.Empty)).ResponseData.ToList();
        _authorsList = result.Select(lst => new BookAuthorsViewModel
            {
                AuthorId = lst.Id,
                AuthorName = string.Concat(lst.FirstName, " ", lst.LastName)
            }).ToList();

        this.DisplaySearchResult = true;

        StateHasChanged();
    }

    private async Task SelectedAuthor(BookAuthorsViewModel author)
    {
        await OnSelectedAuthor.InvokeAsync(author);

        this.authorName = string.Empty;
        this.DisplaySearchResult = false;
    }
}